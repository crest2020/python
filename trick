import re
re.split(r'[\t;" ]\s*',n)
切割文本



def read_even(name):
	l=[]
	with open(name,mode='r') as f:
		for i,j in enumerate(f.readlines()):
			if i%2==1:
				l.append(j)
	with open('result.txt','w') as f2:
		f2.writelines(l)




for i in f:
	list=[]
	ii=i.strip('\n')
	l=ii.split(' ')
	print(l)

                
#一行变一列，python代码

for i in f:
	list=[]
	ii=i.strip('\n')
	l=ii.split(' ')
	for j in range(1,len(l)):
		print(l[0],l[j])
		
#计算重复元素个数
def count1(ll):
	s=collections.defaultdict(int)
	for i in range(len(ll)):
		s[ll[i]]+=1
	return s

def validateseq(dna_seq):
	temseq=dna_seq.upper()
	for nuc in temseq:
		if nuc not in nuclotides:
			return False
	return temseq
def  countnucFrequency(seq):
	Frequency={'A':0,'C':0,'G':0,'T':0}
	for nuc in seq:
		Frequency[nuc]+=1
	return Frequency

def transcription(seq):
	seq=seq.replace('T','U')
	return seq

def gc_count(seq):
	return (seq.count('C')+seq.count('G'))/len(seq)*100
	

def gc_count_window(seq,k):
	res=[]
	for i in range(0,len(seq)-k+1,k):
		temp=gc_count(seq[i:i+k])
		res.append(temp)
	return res
	
	
DNA_codens={
	"TTT": "F", "TTC": "F", "TTA": "L", "TTG": "L",
	"TCT": "S", "TCC": "S", "TCA": "S", "TCG": "S",
	"TAT": "Y", "TAC": "Y",
	"TGT": "C", "TGC": "C",             "TGG": "W",
	"CTT": "L", "CTC": "L", "CTA": "L", "CTG": "L",
	"CCT": "P", "CCC": "P", "CCA": "P", "CCG": "P",
	"CAT": "H", "CAC": "H", "CAA": "Q", "CAG": "Q",
	"CGT": "R", "CGC": "R", "CGA": "R", "CGG": "R",
	 "ATT": "I", "ATC": "I", "ATA": "I", "ATG": "M",
	"ACT": "T", "ACC": "T", "ACA": "T", "ACG": "T",
	"AAT": "N", "AAC": "N", "AAA": "K", "AAG": "K",
	"AGT": "S", "AGC": "S", "AGA": "R", "AGG": "R",
	"GTT": "V", "GTC": "V", "GTA": "V", "GTG": "V",
	"GCT": "A", "GCC": "A", "GCA": "A", "GCG": "A",
	"GAT": "D", "GAC": "D", "GAA": "E", "GAG": "E",
	 "GGT": "G", "GGC": "G", "GGA": "G", "GGG": "G",
	"TAA":"*", "TAG":"*", "TGA":"*"}
RNA_codens
{'UUU': 'F', 'UUC': 'F', 'UUA': 'L', 'UUG': 'L', 'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S', 'UAU': 'Y', 'UAC': 'Y', 
'UGU': 'C', 'UGC': 'C', 'UGG': 'W', 'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L', 'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P', 'CAU': 'H', 
'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q', 'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R', 'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M', 'ACU': 'T',
'ACC': 'T', 'ACA': 'T', 'ACG': 'T', 'AAU': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K', 'AGU': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R', 'GUU': 'V', 
'GUC': 'V', 'GUA': 'V', 'GUG': 'V', 'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A', 'GAU': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E', 'GGU': 'G',
'GGC': 'G', 'GGA': 'G', 'GGG': 'G', 'UAA': '*', 'UAG': '*', 'UGA': '*'}


def translate_seq(seq,init_pos=0):
	res=[]
	for i in range(init_pos,len(seq),3):
		if (i+3)>len(seq):
			#print("break")
			break
		else:
			#print(i)
			temp=seq[(i):(i+3)]
			#print(temp)
			res.append(DNA_codens[temp])
	return ''.join(res)

def read_frame(seq):
	res=[]
	frame0=translate_seq(r,0)
	frame1=translate_seq(r,1)
	frame2=translate_seq(r,2)
	res=[frame0,frame1,frame2]
	return res
#寻找阅读框内有效的翻译序列	
def read_frame_transcript(aa_seq):
	m=[]
	protein=[]
	for aa in aa_seq:
		if aa=='*':
			for p in m:
				protein.append(p)
			break
		else:
			if aa=='M':
				m.append('')
			for i in range(len(m)):
				m[i]+=aa


	return protein


	
钢条切割问题
p=[0,1,5,8,9,10,17,17,20,21,23,24,26,27,28,30,33,36,39,40]
def cut_rod3(p,n):
	r=[0]
	for i in range(1,n+1):
		res=0
		for j in range(1,i+1):
			res=max(res,p[j]+r[i-j])
		r.append(res)
	return r[n]
	
def cut_rod2(p,n):
	if n==0:
		return 0
	else:
		res=p[n]
		for i in range(1,n):
			res=max(res,p[i]+cut_rod2(p,n-i))
		return res

def cut_rod1(p,n):
	if n==0:
		return 0
	else:
		res=p[n]
		for i in range(1,n):
			res=max(res,cut_rod1(p,i)+cut_rod1(p,n-i))
	return res

def cut_rod4_solution(p,n):
	r,s=cut_rod4(p,n)
	res=[]
	while n>0:
		res.append(s[n])
		n-=s[n]
	return res

def fib(n):
	fib_table=[0 for i in range(n+1)]

	fib_table[1]=1
	fib_table[2]=1
	for i in range(3,n+1):
		fib_table[i]=fib_table[i-1]+fib_table[i-2]
	return fib_table[1:]

	
i=1
while i<10:
	j=1
	while j<=i:
		print(f'{i}*{j}={i*j}',end='\t')
		j+=1
	print()
	i+=1
